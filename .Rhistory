theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(title="Bottom 5 Products by Revenue",ylab="Revenue",fill="Description")
lmpbot2 <- ggplot(data=last_month_product[c(6:35),], aes(x=reorder(Description,revenue), y=revenue, fill=reorder(Description,revenue)))+geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(title="Bottom 30 Products by Revenue (ignoring payments and discounts)",ylab="Revenue",fill="Description")
lmpbot3 <- ggplot(data=last_month_product[c(55:84),], aes(x=reorder(Description,revenue), y=revenue, fill=reorder(Description,revenue)))+geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(title="Bottom 30 Products with Positive Revenues",ylab="Revenue",fill="Description")
lmpbot
lmpbot2
lmpbot3
lmptop2
lmpbot
lmpbot2
lmpbot3
vwap_month
#Finding the volume weighted average monthly sale price and plotting
vwap = df %>% group_by(year,month) %>% summarise(vwap = sum(Quantity*Price)/sum(Quantity)) %>% ungroup()
vwap_month <- ggplot(data = vwap, aes(x=month,y=vwap,group = year, colour=as.factor(year)))+
geom_line()+geom_point()+theme(axis.text.x=element_text(angle=90))+
labs(title = "Volume Weight Average Monthly Sale Price", x = "Month of the Year", y = "Total Sales Volume (Units)",colour = "Year")+
scale_x_continuous(breaks=c(1:12))
vwap_month
vwap_month
vwap_month
testing = df[c(1:20),]
for(i in (testing)){
i$ID
}
i
for(i in 1:nrow(testing)){
i$ID
}
for(i in 1:nrow(testing)){
testing[i,]$Price
}
for(i in 1:nrow(testing)){
print(testing[i,]$Price)
}
v = c(1,2,3)
v.append(4)
before = numeric()
date
dates
before[length(before)+1] =1
before
before[length(before)+1] =2
rm before
rm(before)
likely_precollection = df[grepl('C',df$Invoice)&df$year<2010,]
dates = likely_precollection$InvoiceDate
ID = likely_precollection$`Customer ID`
cID = likely_precollection$Invoice
before = numeric()
dates[1]
cId[1]
cID = likely_precollection$Invoice
cID[1]
sum(df$InvoiceDate<dates[1]&df$`Customer ID`==ID[i])
View(modelm2)
View(likely_precollection)
View(df)
before = numeric()
for (i in 1:nrow(likely_precollection)){
if(sum((df$InvoiceDate<dates[i]&df$`Customer ID`==ID[i]))==0){
before[length(before)+1] = cID[i]
}
}
df$invoiceDate<dates[i]
df$InvoiceDate<dates[i]
sum(df$InvoiceDate<dates[i])
df$`Customer ID`==ID[i]
sum(df$`Customer ID`==ID[i])
non_na = df[!is.na(df$`Customer ID`),]
before = numeric()
for (i in 1:nrow(likely_precollection)){
if(sum((non_na$InvoiceDate<dates[i]&non_na$`Customer ID`==ID[i]))==0){
before[length(before)+1] = cID[i]
}
}
non_na$InvoiceDate<dates[i]
sum(non_na$InvoiceDate<dates[i])
non_na$`Customer ID`==ID[i]
sum(non_na$`Customer ID`==ID[i])
likely_precollection[i]
likely_precollection[i,]
likely_precollection = likely_precollection[!is.na(likely_precollection$`Customer ID`),]
dates = likely_precollection$InvoiceDate
ID = likely_precollection$`Customer ID`
cID = likely_precollection$Invoice
before = numeric()
for (i in 1:nrow(likely_precollection)){
if(sum((non_na$InvoiceDate<dates[i]&non_na$`Customer ID`==ID[i]))==0){
before[length(before)+1] = cID[i]
}
}
before = unique(before)
before
likely_precollection = df[grepl('C',df$Invoice)&df$year<2010,]
likely_precollection = likely_precollection[!is.na(likely_precollection$`Customer ID`),]
dates = likely_precollection$InvoiceDate
ID = likely_precollection$`Customer ID`
cID = likely_precollection$Invoice
before = numeric()
for (i in 1:nrow(likely_precollection)){
if(sum((non_na$InvoiceDate<dates[i]&non_na$`Customer ID`==ID[i]))==0){
before[length(before)+1] = cID[i]
}
}
before = unique(before)
df = df[!df$Invoice%in%before,]
View(df)
View(likely_precollection)
likely_precollection = df[grepl('C',df$Invoice)&df$year<2010,]
View(df)
other_na = c("C489859","C489860","C489881","C490307")
df = df[!df$Invoice%in%other_na,]
df <- read_csv("online_retail_II.csv")
head(df)
df$InvoiceDate <- as_datetime(df$InvoiceDate)
df$year <- year(df$InvoiceDate)
df$month <- month(df$InvoiceDate)
df$week <- (isoweek(df$InvoiceDate))
df$day <- day(df$InvoiceDate)
df$weekday <- weekdays(df$InvoiceDate)
head(df)
#Checking for data errors
sapply(df,function(x) sum(is.na(x)))
desc_na = df[is.na(df$Description),]
cust_na = df[is.na(df$`Customer ID`),]
df <- df[!is.na(df$Description),]
sapply(df,function(x) sum(is.na(x)))
cust_na = df[is.na(df$`Customer ID`),]
#Checking for data errors
sapply(df,function(x) sum(is.na(x)))
desc_na = df[is.na(df$Description),]
cust_na = df[is.na(df$`Customer ID`),]
df <- df[!is.na(df$Description),]
sapply(df,function(x) sum(is.na(x)))
cust_na = df[is.na(df$`Customer ID`),]
#Getting daily, weekly, monthly sales data
df_sales_volumes_day <- df %>% group_by(year,month,day) %>% summarise(volume = sum(Quantity)) %>% ungroup()
df_sales_volumes_day$date <- as_date(with(df_sales_volumes_day,paste(year,month,day,sep="-")))
df_sales_volumes_day$ydays <- yday(df_sales_volumes_day$date)
df_sales_volumes_week <- df %>% group_by(year,week) %>% summarise(volume = sum(Quantity)) %>% ungroup()
df_sales_volumes_month <- df %>% group_by(year,month) %>% summarise(volume = sum(Quantity)) %>% ungroup()
#Finding the volume weighted average monthly sale price and plotting
vwap = df %>% group_by(year,month) %>% summarise(vwap = sum(Quantity*Price)/sum(Quantity)) %>% ungroup()
vwap_month <- ggplot(data = vwap, aes(x=month,y=vwap,group = year, colour=as.factor(year)))+
geom_line()+geom_point()+theme(axis.text.x=element_text(angle=90))+
labs(title = "Volume Weight Average Monthly Sale Price", x = "Month of the Year", y = "Total Sales Volume (Units)",colour = "Year")+
scale_x_continuous(breaks=c(1:12))
vwap_month
C489859
M
Manual
-1
2009-12-02 14:45:00
69.57
NA	United Kingdom
2009
12
49
2
Wednesday
550
C489860
90029
NEW BAROQUE SMALL NECKLACE BLACK
-1
2009-12-02 14:49:00
8.50
NA	United Kingdom
2009
12
49
2
Wednesday
551
C489881
21102
CANDLE IN JAR COLLAGE , VANILLA
-31
2009-12-02 16:20:00
2.55
NA
Nigeria
2009
12
49
2
Wednesday
552
C489881
72802A
ROSE SCENT CANDLE IN JEWELLED BOX
-16
2009-12-02 16:20:00
4.25
NA
Nigeri
C490307
vwap_month
#Investing negative quantities, returns and how to account for cancellations for orders before the data collection period
df_neg = df[df$Quantity<0,]
neg_Cancellation = df[grepl('C',df$Invoice),]
non_na = df[!is.na(df$`Customer ID`),]
test = non_na[non_na$`Customer ID`==14590,]
test = non_na[non_na$`Customer ID`==12510,]
likely_precollection = df[grepl('C',df$Invoice)&df$year<2010,]
likely_precollection = likely_precollection[!is.na(likely_precollection$`Customer ID`),]
dates = likely_precollection$InvoiceDate
ID = likely_precollection$`Customer ID`
cID = likely_precollection$Invoice
before = numeric()
for (i in 1:nrow(likely_precollection)){
if(sum((non_na$InvoiceDate<dates[i]&non_na$`Customer ID`==ID[i]))==0){
before[length(before)+1] = cID[i]
}
}
before = unique(before)
df = df[!df$Invoice%in%before,]
other_na = c("C489859","C489860","C489881","C490307")
df = df[!df$Invoice%in%other_na,]
View(df)
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
weekly_sales$Date = as.character.Date(with(weekly_sales,paste(year,week,sep="-")))
sales <- ts(weekly_sales$Revenue,start = c(2009, 49),frequency = 52)
ggtsdisplay(sales)
#Getting monthly revenue and plotting time-series data
df = df[c(1:1037028),]
monthly_sales = df %>% group_by(year,month) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
monthly_sales$Date = as.character.Date(with(monthly_sales,paste(year,month,sep="-")))
salesm <- ts(monthly_sales$Revenue,start = c(2009, 12),frequency = 12)
ggtsdisplay(salesm)
decomposition = decompose(monthly_sales,type="additive")
#Getting mle fitted models for monthly sales and checking a HoltWinters for comparison
modelm1 = auto.arima(salesm,stepwise=FALSE,parallel=TRUE)
modelm1
modelm2 = HoltWinters(salesm)
checkresiduals(modelm1)
#Getting monthly revenue and plotting time-series data
df = df[c(1:1037028),]
monthly_sales = df %>% group_by(year,month) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
monthly_sales$Date = as.character.Date(with(monthly_sales,paste(year,month,sep="-")))
salesm <- ts(monthly_sales$Revenue,start = c(2009, 12),frequency = 12)
ggtsdisplay(salesm)
?ggtsdisplay
ggtsdisplay(salesm,lag.max=12)
ggtsdisplay(salesm,lag.max=24)
ggtsdisplay(sales,lag.max=60)
holt(salesm)
holt(salesm,h=5)
HoltWinters(salesm)
holt(sales)
HoltWinters(sales)
#Getting mle fitted models for weekly sales and checking for best AIC value (also finding a HoltWinters for comparison)
model = auto.arima(sales,stepwise=FALSE,parallel=TRUE)
model
model2 = auto.arima(sales,approximation=FALSE,seasonal=FALSE)
model2
checkresiduals(model)
checkresiduals(model2)
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=(sum(Quantity*Price))) %>% ungroup()
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=(sum(Quantity*Price))) %>% ungroup()
weekly_sales$Date = as.character.Date(with(weekly_sales,paste(year,week,sep="-")))
sales <- ts(weekly_sales$Revenue,start = c(2009, 49),frequency = 52)
ggtsdisplay(sales,lag.max=60)
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
weekly_sales$Date = as.character.Date(with(weekly_sales,paste(year,week,sep="-")))
sales <- ts(weekly_sales$Revenue,start = c(2009, 49),frequency = 52)
ggtsdisplay(sales,lag.max=60)
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=(sum(Quantity*Price))) %>% ungroup()
weekly_sales$Date = as.character.Date(with(weekly_sales,paste(year,week,sep="-")))
sales <- ts(weekly_sales$Revenue,start = c(2009, 49),frequency = 52)
ggtsdisplay(sales,lag.max=60)
#Getting mle fitted models for weekly sales and checking for best AIC value (also finding a HoltWinters for comparison)
model = auto.arima(sales,stepwise=FALSE,parallel=TRUE)
model
model2 = auto.arima(sales,approximation=FALSE,seasonal=FALSE)
model2
checkresiduals(model)
checkresiduals(model2)
#Forecasting with the fitted weekly time-series models
model %>% forecast(h=24) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
model2 %>% forecast(h=24) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
weekly_sales$Date = as.character.Date(with(weekly_sales,paste(year,week,sep="-")))
sales <- ts(weekly_sales$Revenue,start = c(2009, 49),frequency = 52)
ggtsdisplay(sales,lag.max=60)
#Getting mle fitted models for weekly sales and checking for best AIC value (also finding a HoltWinters for comparison)
model = auto.arima(sales,stepwise=FALSE,parallel=TRUE)
model
model2 = auto.arima(sales,approximation=FALSE,seasonal=FALSE)
model2
checkresiduals(model)
checkresiduals(model2)
#Forecasting with the fitted weekly time-series models
model %>% forecast(h=24) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
model2 %>% forecast(h=24) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
?arima
salesm %>% diff(lag=4) %>% ggtsdisplay()
salesm %>% diff(lag=1) %>% ggtsdisplay()
salesm %>% diff(lag=0) %>% ggtsdisplay()
ggtsdisplay(salesm,lag.max=24)
salesm %>% diff(lag=1) %>% ggtsdisplay()
salesm %>% diff(lag=2) %>% ggtsdisplay()
salesm %>% diff(lag=3) %>% ggtsdisplay()
salesm %>% diff(lag=4) %>% ggtsdisplay()
salesm %>% diff(lag=12) %>% ggtsdisplay()
salesm %>% diff(lag=24) %>% ggtsdisplay()
salesm %>% diff(lag=23) %>% ggtsdisplay()
salesm %>% diff(lag=23) %>% ggtsdisplay()
salesm %>% diff(lag=20) %>% ggtsdisplay()
salesm %>% diff(lag=17) %>% ggtsdisplay()
salesm %>% diff(lag=5) %>% ggtsdisplay()
salesm %>% diff(lag=1) %>% ggtsdisplay()
salesm %>% diff(lag=2) %>% ggtsdisplay()
salesm %>% diff(lag=4) %>% ggtsdisplay()
salesm %>% diff(lag=4) %>% ggtsdisplay()
salesm %>% diff(lag=1) %>% ggtsdisplay()
salesm %>% diff(lag=2) %>% ggtsdisplay()
ggtsdisplay(salesm,lag.max=24)
modelm3 = arima(salesm, order=c(1,0,0),seasonal=c(1,0,0))
modelm3 = arima(salesm, order=c(1,0,0),seasonal=c(0,0,1))
modelm3
#Forecasting with the fitted monthly time-series models
modelm1 %>% forecast(h=6) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
modelm2 %>% forecast(h=6) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
modelm3 %>% forecast(h=6) %>% autoplot() + ylab("Revenue (British Pounds") + xlab("Time")
log(10)
log(e)
exp1
exp
exp(1)
log(exp(1))
#Getting monthly revenue and plotting time-series data
df = df[c(1:1037028),]
monthly_sales = df %>% group_by(year,month) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
monthly_sales$Date = as.character.Date(with(monthly_sales,paste(year,month,sep="-")))
salesm <- ts(monthly_sales$Revenue,start = c(2009, 12),frequency = 12)
ggtsdisplay(salesm,lag.max=24)
model3 = arima(sales,order=c(5,0,0),seasonal=c(0,0,1))
model3
model2
model
model3
model2
model3
modelm3
checkresiduals(modelm3)
checkresiduals(model3)
model2
model
HoltWinters(sales)
HoltWinters(salesm)
#Getting mle fitted models for monthly sales and checking a HoltWinters for comparison
modelm1 = auto.arima(salesm,stepwise=FALSE,parallel=TRUE)
modelm1
modelm2 = HoltWinters(salesm)
checkresiduals(modelm1)
modelm3 = arima(salesm, order=c(1,0,0),seasonal=c(0,0,1))
modelm3
checkresiduals(modelm3)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(tidyverse)
library(lubridate)
setwd("C:\\Users\\jloo1\\Dropbox\\Projects\\Retail-Demand-Prediction")
df <- read_csv("online_retail_II.csv")
head(df)
#Checking for data errors
sapply(df,function(x) sum(is.na(x)))
desc_na = df[is.na(df$Description),]
cust_na = df[is.na(df$`Customer ID`),]
df <- df[!is.na(df$Description),]
sapply(df,function(x) sum(is.na(x)))
cust_na = df[is.na(df$`Customer ID`),]
#Getting last month's data grouped by customers and products
last_month = df[df$year==2011&df$month==11,]
last_month$StockCode = as.factor(last_month$StockCode)
last_month_product <- last_month %>% group_by(Description) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
last_month_customer <- last_month %>% group_by(`Customer ID`) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
last_month_customer <- last_month_customer %>% rename(`ID`="Customer ID",revenue="revenue")
last_month_customer$ID = as.character(last_month_customer$ID)
#Getting last month's data grouped by customers and products
last_month = df[df$year==2011&df$month==11,]
last_month$StockCode = as.factor(last_month$StockCode)
last_month_product <- last_month %>% group_by(Description) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
last_month_customer <- last_month %>% group_by(`Customer ID`) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
last_month_customer <- last_month_customer %>% rename(`ID`="Customer ID",revenue="revenue")
last_month_customer$ID = as.character(last_month_customer$ID)
#Checking for data errors
sapply(df,function(x) sum(is.na(x)))
desc_na = df[is.na(df$Description),]
cust_na = df[is.na(df$`Customer ID`),]
df <- df[!is.na(df$Description),]
sapply(df,function(x) sum(is.na(x)))
cust_na = df[is.na(df$`Customer ID`),]
df$InvoiceDate <- as_datetime(df$InvoiceDate)
df$year <- year(df$InvoiceDate)
df$month <- month(df$InvoiceDate)
df$week <- (isoweek(df$InvoiceDate))
df$day <- day(df$InvoiceDate)
df$weekday <- weekdays(df$InvoiceDate)
head(df)
#Checking for data errors
sapply(df,function(x) sum(is.na(x)))
desc_na = df[is.na(df$Description),]
cust_na = df[is.na(df$`Customer ID`),]
df <- df[!is.na(df$Description),]
sapply(df,function(x) sum(is.na(x)))
cust_na = df[is.na(df$`Customer ID`),]
#Getting last month's data grouped by customers and products
last_month = df[df$year==2011&df$month==11,]
last_month$StockCode = as.factor(last_month$StockCode)
last_month_product <- last_month %>% group_by(Description) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
last_month_customer <- last_month %>% group_by(`Customer ID`) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
last_month_customer <- last_month_customer %>% rename(`ID`="Customer ID",revenue="revenue")
last_month_customer$ID = as.character(last_month_customer$ID)
View(last_month)
#Considering consumer country spread
lmcoun = last_month %>% group_by(Country) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
View(lmcoun)
#Considering consumer country spread
lmcoun = last_month %>% group_by(Country) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
lmcount <- ggplot(data=lmcoun, aes(x=reorder(Country,revenue), y=revenue, fill=Country))+geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(title="Countries by Revenue",ylab="Revenue")
lmcount
#Considering consumer country spread
lmcoun = last_month %>% group_by(Country) %>% summarise(revenue = sum(Quantity*Price)) %>% ungroup()
lmcount <- ggplot(data=lmcoun, aes(x=reorder(Country,revenue), y=revenue, fill=reorder(Country,revenue)))+geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(title="Countries by Revenue",ylab="Revenue")
lmcount
lmcount
lmcount
forecast(model,h=24)
#Investing negative quantities, returns and how to account for cancellations for orders before the data collection period
df_neg = df[df$Quantity<0,]
neg_Cancellation = df[grepl('C',df$Invoice),]
non_na = df[!is.na(df$`Customer ID`),]
test = non_na[non_na$`Customer ID`==14590,]
test = non_na[non_na$`Customer ID`==12510,]
likely_precollection = df[grepl('C',df$Invoice)&df$year<2010,]
likely_precollection = likely_precollection[!is.na(likely_precollection$`Customer ID`),]
dates = likely_precollection$InvoiceDate
ID = likely_precollection$`Customer ID`
cID = likely_precollection$Invoice
before = numeric()
for (i in 1:nrow(likely_precollection)){
if(sum((non_na$InvoiceDate<dates[i]&non_na$`Customer ID`==ID[i]))==0){
before[length(before)+1] = cID[i]
}
}
before = unique(before)
df = df[!df$Invoice%in%before,]
other_na = c("C489859","C489860","C489881","C490307")
df = df[!df$Invoice%in%other_na,]
#Getting weekly revenue and plotting time-series data
weekly_sales = df %>% group_by(year,week) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
weekly_sales$Date = as.character.Date(with(weekly_sales,paste(year,week,sep="-")))
sales <- ts(weekly_sales$Revenue,start = c(2009, 49),frequency = 52)
ggtsdisplay(sales,lag.max=60)
#Getting monthly revenue and plotting time-series data
df = df[c(1:1037028),]
monthly_sales = df %>% group_by(year,month) %>% summarise(Revenue=log(sum(Quantity*Price))) %>% ungroup()
monthly_sales$Date = as.character.Date(with(monthly_sales,paste(year,month,sep="-")))
salesm <- ts(monthly_sales$Revenue,start = c(2009, 12),frequency = 12)
ggtsdisplay(salesm,lag.max=24)
#Getting mle fitted models for weekly sales and checking for best AIC value
model = auto.arima(sales,approximation=FALSE,seasonal=FALSE)
model
model2 = arima(sales,order=c(5,0,0),seasonal=c(0,0,1))
model2
checkresiduals(model)
checkresiduals(model2)
#Getting mle fitted models for monthly sales and checking a HoltWinters for comparison
modelm1 = auto.arima(salesm,stepwise=FALSE,parallel=TRUE)
modelm1
modelm2 = HoltWinters(salesm)
checkresiduals(modelm1)
modelm3 = arima(salesm, order=c(1,0,0),seasonal=c(0,0,1))
modelm3
checkresiduals(modelm3)
forecast(modelm3,h=6)
forecast(model2,h=12)
forecast(modelm2,h=5)
forecast(model2,h=1)
forecast(model2,h=4)
exp(12.05044)+exp(11.69243)+exp(11.32185)+exp(11.51102)
exp(13.14555)+exp(12.88317)+exp(12.54334)+exp(12.74860)
forecast(modelm2,h=1)
exp(13.87042)
exp(14.11985)
